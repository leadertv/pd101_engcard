import telebot
import random
from telebot import types
import db

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù'
bot = telebot.TeleBot(TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
user_stats = {}
user_quiz_data = {}
user_state = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_NONE = 0
STATE_ADD_WORD = 1
STATE_DELETE_WORD = 2


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user_data(user_id):
    if user_id not in user_stats:
        user_stats[user_id] = {'correct': 0, 'incorrect': 0, 'in_quiz': False}
    if user_id not in user_quiz_data:
        user_quiz_data[user_id] = {}
    if user_id not in user_state:
        user_state[user_id] = STATE_NONE


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def create_quiz_keyboard(correct_translation, all_translations):
    options = set([correct_translation])
    while len(options) < 4:
        options.add(random.choice(all_translations))
    options = list(options)
    random.shuffle(options)

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    for i in range(0, len(options), 2):
        buttons = [types.KeyboardButton(text) for text in options[i:i + 2]]
        keyboard.row(*buttons)

    keyboard.add(types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üö´"))

    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    init_user_data(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    init_user_data(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == 'üìó –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ':
        user_state[user_id] = STATE_ADD_WORD
        add_word_handler(message)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ':
        user_state[user_id] = STATE_DELETE_WORD
        delete_word_handler(message)
    elif message.text == 'üé≤ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É':
        user_state[user_id] = STATE_NONE
        start_quiz_handler(message)
    elif message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        user_state[user_id] = STATE_NONE
        show_stats(message)
    else:
        if user_stats.get(user_id, {}).get('in_quiz', False):
            quiz_answer_handler(message)
        elif user_state.get(user_id) == STATE_DELETE_WORD:
            handle_delete_word(message)
        elif user_state.get(user_id) == STATE_ADD_WORD:
            add_word(message)
        else:
            handle_unrecognized_text(message)


def add_word_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–æ : –ø–µ—Ä–µ–≤–æ–¥):")


def add_word(message):
    user_id = message.chat.id
    text = message.text.strip()
    if ':' not in text:
        bot.send_message(user_id,
                         "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ "
                         "—á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–æ : –ø–µ—Ä–µ–≤–æ–¥).")
        return

    word, translation = text.split(':', 1)
    word = word.strip()
    translation = translation.strip()

    if not word or not translation:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –°–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
        return

    db.add_user_word(user_id, word, translation)
    bot.send_message(user_id, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    user_state[user_id] = STATE_NONE


def delete_word_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


def handle_delete_word(message):
    user_id = message.chat.id
    word_to_delete = message.text.strip()
    if db.delete_user_word(user_id, word_to_delete):
        bot.send_message(user_id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        bot.send_message(user_id, "–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–ª–æ–≤–∞.")
    user_state[user_id] = STATE_NONE


def start_quiz_handler(message):
    user_id = message.chat.id
    init_user_data(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats[user_id]['in_quiz'] = True
    next_quiz_question(message)


def next_quiz_question(message):
    user_id = message.chat.id
    all_words = db.get_all_words() + db.get_user_words(user_id)
    random.shuffle(all_words)

    if not all_words:
        bot.send_message(user_id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", reply_markup=main_menu())
        user_stats[user_id]['in_quiz'] = False
        return

    word, correct_translation = random.choice(all_words)
    all_translations = [item[1] for item in all_words]
    keyboard = create_quiz_keyboard(correct_translation, all_translations)

    user_quiz_data[user_id] = {'word': word, 'correct_translation': correct_translation}
    bot.send_message(user_id, f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ '{word}'?", reply_markup=keyboard)


def quiz_answer_handler(message):
    user_id = message.chat.id
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üö´":
        user_stats[user_id]['in_quiz'] = False
        bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!", reply_markup=main_menu())
        return

    data = user_quiz_data.get(user_id)
    if not data or 'correct_translation' not in data:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    correct_translation = data['correct_translation']
    if message.text == correct_translation:
        bot.send_message(user_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        user_stats[user_id]['correct'] += 1
        next_quiz_question(message)
    else:
        bot.send_message(user_id, "üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        user_stats[user_id]['incorrect'] += 1


def show_stats(message):
    user_id = message.chat.id
    stats = user_stats.get(user_id, {'correct': 0, 'incorrect': 0})
    bot.send_message(message.chat.id, f"–£–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤: {stats['correct']}\n–û—à–∏–±–∫–∏: {stats['incorrect']}")


def handle_unrecognized_text(message):
    bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
                     reply_markup=main_menu())


def main_menu():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üìó –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", "üé≤ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    keyboard.add(*buttons)
    return keyboard


if __name__ == '__main__':
    db.create_tables()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç. –ë–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —É–∂–µ –±—ã—Ç—å.
    db.add_test_data()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ë–î)
    bot.polling(none_stop=True)
